# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd
import json

# ==============================================================
# üß† SETUP SUPABASE
# ==============================================================
SUPABASE_URL = st.secrets["https://cckdfjxowgowgxufnhnj.supabase.co"]
SUPABASE_KEY = st.secrets["eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNja2Rmanhvd2dvd2d4dWZuaG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NDY4NDgsImV4cCI6MjA3NzEyMjg0OH0.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"]
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

st.set_page_config(page_title="Talent Match Intelligence", layout="wide")

st.title("üíº Talent Match Intelligence v3.2")
st.caption("Final version ‚Äî with AI Job Profile, custom TGV weight, & TV list.")

# ==============================================================
# 1Ô∏è‚É£ PILIH BENCHMARK (RATING 5)
# ==============================================================
st.subheader("üèÜ Select Employee Benchmark")

employees = supabase.table("employee_master").select("employee_id, fullname, role_name, rating").eq("rating", 5).execute()
df_emp = pd.DataFrame(employees.data)

employee_options = [
    f"{row['employee_id']} - {row['fullname']} ({row['role_name']})"
    for _, row in df_emp.iterrows()
]

selected = st.multiselect("Choose Top Performer(s):", employee_options)

selected_ids = [s.split(" - ")[0] for s in selected]

# ==============================================================
# 2Ô∏è‚É£ CUSTOMIZE TGV WEIGHTS
# ==============================================================
st.subheader("‚öôÔ∏è Customize Success Formula Weight")

default_weights = {
    "Adaptability & Stress Tolerance": 0.08,
    "Cognitive Complexity & Problem-Solving": 0.20,
    "Conscientiousness & Reliability": 0.14,
    "Creativity & Innovation Orientation": 0.06,
    "Cultural & Values Urgency": 0.02,
    "Leadership & Influence": 0.22,
    "Motivation & Drive": 0.18,
    "Social Orientation & Collaboration": 0.10,
}

cols = st.columns(4)
custom_tgv_weights = {}
for i, (k, v) in enumerate(default_weights.items()):
    with cols[i % 4]:
        custom_tgv_weights[k] = st.number_input(k, min_value=0.0, max_value=1.0, value=v, step=0.01)

# normalize
total = sum(custom_tgv_weights.values())
if total != 1.0:
    st.warning(f"‚ö†Ô∏è Total weight = {total:.2f}. Automatically normalized to 1.0")
    custom_tgv_weights = {k: v / total for k, v in custom_tgv_weights.items()}

# ==============================================================
# 3Ô∏è‚É£ GENERATE JOB PROFILE & VARIABLE SCORE
# ==============================================================
st.subheader("üß© Generate AI Job Profile")

if st.button("‚ú® Generate Job Profile & Variable Score", use_container_width=True):
    if not selected_ids:
        st.error("Please select at least one benchmark employee.")
    else:
        with st.spinner("Running Talent Match Scoring..."):
            result = supabase.rpc(
                "talent_match_scoring_v3",
                {
                    "benchmark_ids": selected_ids,
                    "custom_tgv_list": None,
                    "custom_tgv_weights": custom_tgv_weights,
                    "employee_id": None  # ‚úÖ FIX ARGUMENT 4
                }
            ).execute()

        if not result.data:
            st.warning("‚ö†Ô∏è No results found from scoring.")
        else:
            df_result = pd.DataFrame(result.data)
            st.dataframe(df_result, use_container_width=True)
            st.success("‚úÖ Job Profile & Variable Score generated successfully!")

# ==============================================================
# 4Ô∏è‚É£ OPTIONAL ‚Äî CUSTOM TV LIST
# ==============================================================
st.subheader("üß† Custom Talent Variables (Optional)")

custom_tv_list = st.text_area(
    "Enter your custom Talent Variables (comma separated)",
    placeholder="Example: Futuristic, Intellection, Developer, Context, Positivity"
)

custom_tv_list = [t.strip() for t in custom_tv_list.split(",") if t.strip()] or None

# ==============================================================
# 5Ô∏è‚É£ RUN TALENT MATCH (FINAL)
# ==============================================================
st.subheader("üöÄ Run Talent Match Scoring")

if st.button("üíæ Save & Run Talent Match", use_container_width=True):
    if not selected_ids:
        st.error("Please select at least one benchmark employee.")
    else:
        with st.spinner("Running final match computation..."):
            result = supabase.rpc(
                "talent_match_scoring_v3",
                {
                    "benchmark_ids": selected_ids,
                    "custom_tgv_list": custom_tv_list,
                    "custom_tgv_weights": custom_tgv_weights,
                    "employee_id": None  # ‚úÖ FIX ARGUMENT 4
                }
            ).execute()

        if not result.data:
            st.warning("‚ö†Ô∏è No results found from scoring.")
        else:
            df_final = pd.DataFrame(result.data)
            st.dataframe(df_final, use_container_width=True)
            st.success("üéØ Talent Match completed successfully!")

            csv = df_final.to_csv(index=False).encode("utf-8")
            st.download_button("‚¨áÔ∏è Download Results as CSV", csv, "talent_match_results.csv", "text/csv")

# ==============================================================
# üß≠ FOOTER
# ==============================================================
st.markdown("---")
st.caption("Developed for Talent Match Intelligence | v3.2 ‚Äî 2025")






