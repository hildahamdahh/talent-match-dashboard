# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

# -*- coding: utf-8 -*-
"""Talent Match Intelligence Dashboard (by Hilda Hamdah H)"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd
import plotly.express as px
from openai import OpenAI
import requests, json, re, os
from datetime import datetime


# ==========================================================
# SUPABASE CONNECTION
# ==========================================================
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNja2Rmanhvd2dvd2d4dWZuaG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NDY4NDgsImV4cCI6MjA3NzEyMjg0OH0.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"
supabase: Client = create_client(url, key)

# ==========================================================
# OPENROUTER CLIENT
# ==========================================================
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=st.secrets["OPENROUTER_API_KEY"]
)

# ==========================================================
# PAGE CONFIGURATION
# ==========================================================
st.set_page_config(page_title="Talent Match Intelligence", layout="wide")
st.title("Talent Match Intelligence Dashboard")

# ==========================================================
# TAB SETUP
# ==========================================================
tab1, tab2 = st.tabs(["1. Role Information", "2. Job Details"])

# ==========================================================
# TAB 1: ROLE INFORMATION
# ==========================================================
with tab1:
    # ====== STYLING ======
    st.markdown(
        """
        <style>
        .section-header {font-size: 1.1rem;font-weight: 600;color: #0E1117;border-bottom: 1px solid #e1e1e1;padding-bottom: 0.3rem;margin-bottom: 1rem;}
        .sub-label {font-size: 1.0rem;font-weight: 600;color: #333333;margin-top: 1.5rem;margin-bottom: 0.3rem;}
        </style>
        """,
        unsafe_allow_html=True
    )

    # ==========================================================
    # STEP 1: FETCH EMPLOYEE DATA
    # ==========================================================
    try:
        response = supabase.table("employee_tv_scores").select(
            "employee_id, fullname, position_name, job_level"
        ).eq("rating", 5).execute()
        data = response.data
    except Exception as e:
        st.error(f"Failed to retrieve data: {e}")
        st.stop()

    if not data:
        st.warning("No employee data found (rating = 5).")
        st.stop()

    df = pd.DataFrame(data)

    # ==========================================================
    # STEP 2: ROLE INFORMATION INPUTS
    # ==========================================================
    st.markdown('<div class="section-header">1. Role Information</div>', unsafe_allow_html=True)

    # Role Name
    role_names = sorted(df["position_name"].dropna().unique())
    selected_role = st.selectbox("Role Name", ["Ex. Marketing Manager"] + role_names)

    # Job Level
    if selected_role != "Ex. Marketing Manager":
        filtered_for_level = df[df["position_name"] == selected_role]
        job_levels = sorted(filtered_for_level["job_level"].dropna().unique())
    else:
        job_levels = sorted(df["job_level"].dropna().unique())

    selected_job_level = st.selectbox("Job Level", ["Choose your job level"] + job_levels)

    # Role Purpose
    role_purpose = st.text_area(
        "Role Purpose",
        placeholder="1–2 sentences describing the main role objective"
    )
    st.caption("Example: Ensure production targets are achieved with optimal quality and cost efficiency.")

    # ==========================================================
    # STEP 3: EMPLOYEE BENCHMARK SELECTION
    # ==========================================================
    st.markdown('<div class="sub-label">Employee Benchmarking</div>', unsafe_allow_html=True)

    if selected_role != "Ex. Marketing Manager":
        df_emp_options = df[df["position_name"] == selected_role].copy()
    else:
        df_emp_options = df.copy()

    if selected_job_level != "Choose your job level":
        df_emp_options = df_emp_options[df_emp_options["job_level"] == selected_job_level]

    df_emp_options = df_emp_options.drop_duplicates(subset=["employee_id"])

    if df_emp_options.empty:
        st.warning("No matching benchmark employees found for this position/level.")
    else:
        df_emp_options["label"] = (
            df_emp_options["employee_id"] + " - " + df_emp_options["fullname"] +
            " (" + df_emp_options["position_name"] + ")"
        )

        selected = st.multiselect(
            "Select Benchmark Employees (max 3)",
            options=df_emp_options["label"].tolist(),
            max_selections=3,
            placeholder="Select benchmark employees"
        )

    # Save selected employees to session state
    if "benchmark_selected" not in st.session_state:
        st.session_state["benchmark_selected"] = []
    if selected is not None:
        st.session_state["benchmark_selected"] = selected

    # ==========================================================
    # STEP 4: CUSTOM TGV WEIGHT ADJUSTMENT
    # ==========================================================
    st.markdown("### Custom TGV Weight Adjustment")
    st.caption("Adjust competency (TGV) weights as needed. The defaults are based on Step 1 results. Total must equal 1.00 for balance.")

    default_weights = {
        "Adaptability & Stress Tolerance": 0.06,
        "Cognitive Complexity & Problem-Solving": 0.25,
        "Conscientiousness & Reliability": 0.10,
        "Creativity & Innovation Orientation": 0.02,
        "Cultural & Values Urgency": 0.02,
        "Leadership & Influence": 0.30,
        "Motivation & Drive": 0.20,
        "Social Orientation & Collaboration": 0.05
    }

    custom_tgv_dict = {}
    total_weight = 0
    cols = st.columns(4)
    for i, (tgv, default_val) in enumerate(default_weights.items()):
        with cols[i % 4]:
            weight = st.slider(
                tgv,
                min_value=0.00,
                max_value=0.50,
                step=0.01,
                value=default_val,
                key=f"tgv_{i}"
            )
            custom_tgv_dict[tgv] = weight
            total_weight += weight

    st.markdown(f"**Total Weight = {total_weight:.2f}**")
    if abs(total_weight - 1.0) > 0.01:
        st.warning("The total weight should be approximately 1.00 for proportional results.")

    st.session_state["custom_tgv_weight"] = custom_tgv_dict

    # ==========================================================
    # STEP 5: AI JOB PROFILE GENERATION + VARIABLE SCORING
    # ==========================================================
    st.markdown("---")

    if "job_generated" not in st.session_state:
        st.session_state.job_generated = False
    if "df_result" not in st.session_state:
        st.session_state.df_result = None
    if "top_tgv_df" not in st.session_state:
        st.session_state.top_tgv_df = None

    # Generate Job Profile (AI)
    def generate_job_profile(role_name, job_level, role_purpose):
        try:
            OPENROUTER_API_KEY = st.secrets["OPENROUTER_API_KEY"]
        except Exception:
            st.error("OPENROUTER_API_KEY is not configured in Streamlit secrets.")
            return None

        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://talent-match-intelligence.streamlit.app",
            "X-Title": "Talent Match Intelligence",
            "Content-Type": "application/json",
        }

        prompt = f"""
        You are an HR Talent Intelligence Assistant.
        Generate a concise Job Profile for a {job_level} {role_name}.
        Include:
        1) Job Requirements
        2) Job Description
        3) Key Competencies
        Context: {role_purpose}
        """

        payload = {
            "model": "openai/gpt-4o-mini",
            "messages": [
                {"role": "system", "content": "Generate concise job profiles for HR professionals."},
                {"role": "user", "content": prompt}
            ]
        }

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            data=json.dumps(payload)
        )

        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"Error from OpenRouter: {response.status_code} - {response.text}"

    # Run job profile and variable scoring
    if st.button("Generate AI-Based Job Profile & Variable Score"):
        if not (selected and len(selected) > 0):
            st.warning("Please select at least one benchmark employee.")
        elif not selected_role or not selected_job_level:
            st.warning("Please complete Role Name and Job Level first.")
        else:
            with st.spinner("Generating AI-based job profile..."):
                ai_profile = generate_job_profile(selected_role, selected_job_level, role_purpose)
                if ai_profile and not ai_profile.startswith("⚠️"):
                    st.subheader("AI-Generated Job Profile Overview")
                    clean_text = re.sub(r"<[^>]*>", "", ai_profile)
                    clean_text = clean_text.replace("&nbsp;", " ").replace("&amp;", "&").strip()
                    st.write(clean_text)
                    st.session_state["ai_job_profile_overview"] = clean_text
                    st.success("AI Job Profile successfully generated.")
                else:
                    st.error("Failed to generate Job Profile. Please retry.")

            # Continue to variable scoring
            with st.spinner("Calculating variable scores..."):
                selected_ids = [s.split(" - ")[0] for s in selected]
                try:
                    result = supabase.rpc(
                        "talentmatch_r5_fix",
                        {
                            "selected_ids": selected_ids,
                            "custom_tgv_list": None,
                            "custom_tgv_weight": custom_tgv_dict
                        }).execute()

                    if result.data:
                        df_result = pd.DataFrame(result.data)
                        desired_cols = [
                            "employee_id", "fullname", "position_name", "job_level", "rating",
                            "tgv_name", "category_type", "baseline_score", "tgv_weight",
                            "user_score", "tgv_match_rate", "final_match_rate"
                        ]
                        available_cols = [c for c in desired_cols if c in df_result.columns]
                        df_result = df_result[available_cols].copy()
                        df_result["final_match_rate"] = pd.to_numeric(df_result["final_match_rate"], errors="coerce")
                        df_result["tgv_match_rate"] = pd.to_numeric(df_result["tgv_match_rate"], errors="coerce")

                        top_tgv_df = (
                            df_result.sort_values(["employee_id", "tgv_match_rate"], ascending=[True, False])
                            .groupby("employee_id", as_index=False)
                            .first()
                            .loc[:, ["employee_id", "fullname", "position_name", "job_level", "tgv_name", "tgv_match_rate", "final_match_rate"]]
                        )
                        top_tgv_df = top_tgv_df.sort_values(by="final_match_rate", ascending=False).reset_index(drop=True)

                        st.session_state.job_generated = True
                        st.session_state.df_result = df_result
                        st.session_state.top_tgv_df = top_tgv_df
                        st.success("Variable scoring completed successfully.")
                    else:
                        st.warning("No data found for the selected employees.")
                except Exception as e:
                    st.error(f"Failed to execute query: {e}")

    # ==========================================================
    # STEP 6: DASHBOARD INSIGHTS & VISUALIZATION
    # ==========================================================
    if st.session_state.job_generated and st.session_state.df_result is not None:
        df_result = st.session_state.df_result
        top_tgv_df = st.session_state.top_tgv_df

        st.markdown("---")
        st.markdown("## Dashboard Insights & Visualization")

        # Ranked Talent List
        st.markdown("### Ranked Talent List")
        st.dataframe(top_tgv_df, use_container_width=True)

        # Full Benchmark Details
        with st.expander("Full Benchmark Details"):
            st.dataframe(df_result, use_container_width=True, height=600)

        # Match-Rate Distribution
        st.markdown("### Match-Rate Distribution")
        fig_hist = px.histogram(
            df_result,
            x="final_match_rate",
            nbins=10,
            title="Distribution of Final Match Rates",
            labels={"final_match_rate": "Final Match Rate (%)"},
            color_discrete_sequence=["#4C78A8"]
        )
        st.plotly_chart(fig_hist, use_container_width=True)

        # Top Strengths & Gaps
        st.markdown("### Top Strengths & Gaps Across TGVs")
        tgv_summary = (
            df_result.groupby("tgv_name", as_index=False)
            .agg(avg_match_rate=("tgv_match_rate", "mean"))
            .sort_values("avg_match_rate", ascending=False)
        )
        fig_bar = px.bar(
            tgv_summary,
            x="tgv_name",
            y="avg_match_rate",
            title="Average Match Rate by TGV",
            color="avg_match_rate",
            color_continuous_scale="Blues",
            labels={"avg_match_rate": "Avg Match Rate (%)", "tgv_name": "TGV Name"}
        )
        st.plotly_chart(fig_bar, use_container_width=True)

        # Radar Chart: Benchmark vs Candidate
        st.markdown("### Benchmark vs Candidate Comparison")
        import plotly.graph_objects as go
        selected_emp = st.selectbox(
            "Select a candidate to compare with the benchmark:",
            top_tgv_df["fullname"]
        )
        emp_data = df_result[df_result["fullname"] == selected_emp]
        tgv_list = emp_data["tgv_name"].tolist()
        emp_score = emp_data["tgv_match_rate"].tolist()
        baseline_score = [100] * len(tgv_list)
        fig_radar = go.Figure()
        fig_radar.add_trace(go.Scatterpolar(
            r=baseline_score,
            theta=tgv_list,
            fill='toself',
            name='Benchmark (Ideal)',
            line=dict(color='lightgray')
        ))
        fig_radar.add_trace(go.Scatterpolar(
            r=emp_score,
            theta=tgv_list,
            fill='toself',
            name=selected_emp,
            line=dict(color='royalblue')
        ))
        fig_radar.update_layout(
            polar=dict(radialaxis=dict(visible=True, range=[0, 100])),
            showlegend=True,
            title=f"TGV Comparison: {selected_emp} vs Benchmark"
        )
        st.plotly_chart(fig_radar, use_container_width=True)

        # AI Summary Insights
        st.markdown("### AI Summary Insights")
        try:
            client = OpenAI(
                base_url="https://openrouter.ai/api/v1",
                api_key=os.getenv("OPENROUTER_API_KEY")
            )
            with st.spinner("Generating AI insights..."):
                avg_score = df_result["final_match_rate"].mean()
                top_name = top_tgv_df.iloc[0]["fullname"]
                top_score = top_tgv_df.iloc[0]["final_match_rate"]
                strongest_tgv = tgv_summary.iloc[0]["tgv_name"]
                weakest_tgv = tgv_summary.iloc[-1]["tgv_name"]

                prompt = f"""
                You are an HR Data Analyst. Based on the scoring results:
                - Average Match Rate: {avg_score:.1f}%
                - Top Performer: {top_name} ({top_score:.1f}%)
                - Strongest Competency: {strongest_tgv}
                - Weakest Competency: {weakest_tgv}

                Write a 3–5 sentence summary explaining why the top performer excels compared to others,
                linking it to their strengths and suggesting brief talent development recommendations.
                """

                response = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": "You are an HR Data Analyst providing concise insights."},
                        {"role": "user", "content": prompt}
                    ]
                )
                insight_text = response.choices[0].message.content
                st.success(insight_text)
        except Exception as e:
            st.error(f"Failed to generate AI insight: {e}")

# ==========================================================
# TAB 2: JOB DETAILS
# ==========================================================
with tab2:
    st.markdown(
        """
        <style>
        .job-details-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            text-align: center;
        }
        .job-details-box {
            width: 80%;
            background-color: #F8F9FA;
            border-radius: 10px;
            padding: 1.5rem;
            margin-top: 1rem;
            box-shadow: 0 1px 4px rgba(0,0,0,0.1);
        }
        .save-button {
            font-size: 1rem;
            font-weight: 600;
            color: white;
            background-color: #4C78A8;
            border: none;
            padding: 0.6rem 1.5rem;
            border-radius: 8px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.markdown("### 1️⃣ Role Summary Overview")
    st.caption("Summarized information generated from Step 1 selections and AI-based job profiling.")

    # Display stored AI profile if available
    if "ai_job_profile_overview" in st.session_state:
        st.text_area(
            "AI-Generated Job Profile Overview",
            st.session_state["ai_job_profile_overview"],
            height=200
        )
    else:
        st.info("No job profile generated yet — please complete Step 1 first.")

    # ==========================================================
    # INPUT FIELDS FOR ROLE DETAILS
    # ==========================================================
    st.markdown("### 2️⃣ Input Key Role Details")
    st.caption("Provide or adjust the details below to refine your role specification before running Talent Match.")

    col1, col2 = st.columns(2)
    with col1:
        role_name_input = st.text_input("Role Name", value=st.session_state.get("selected_role", ""))
        job_level_input = st.text_input("Job Level", value=st.session_state.get("selected_job_level", ""))
        directorate_input = st.text_input("Directorate", placeholder="e.g., Human Capital")
    with col2:
        department_input = st.text_input("Department", placeholder="e.g., Talent Development")
        division_input = st.text_input("Division", placeholder="e.g., People Analytics")
        company_input = st.text_input("Company", placeholder="e.g., Rakamin Academy")

    st.text_area(
        "Role Description",
        placeholder="Describe the role scope and key responsibilities in 2–3 sentences."
    )

    # ==========================================================
    # CUSTOM WEIGHT SETTINGS SECTION
    # ==========================================================
    st.markdown("---")
    st.markdown("### 3️⃣ Custom Weight Settings (TGV Prioritization)")
    st.caption("You may customize the TGV list and weighting again here before executing Talent Match Scoring.")

    # Select specific TGVs to apply
    tgv_options = [
        "Leadership & Influence",
        "Motivation & Drive",
        "Cognitive Complexity & Problem-Solving",
        "Conscientiousness & Reliability",
        "Adaptability & Stress Tolerance",
        "Social Orientation & Collaboration",
        "Creativity & Innovation Orientation",
        "Cultural & Values Urgency"
    ]

    selected_tgv_list = st.multiselect(
        "Select TGVs to include (leave empty to include all)",
        options=tgv_options,
        placeholder="Select key TGVs for this role"
    )

    # Editable TGV Weights
    st.markdown("#### Adjust Custom TGV Weights")
    tgv_weight_inputs = {}
    cols = st.columns(4)
    for i, tgv_name in enumerate(tgv_options):
        with cols[i % 4]:
            tgv_weight_inputs[tgv_name] = st.number_input(
                tgv_name,
                min_value=0.00,
                max_value=0.50,
                step=0.01,
                value=st.session_state.get("custom_tgv_weight", {}).get(tgv_name, 0.10),
                key=f"tgv_weight_tab2_{i}"
            )

    st.markdown(f"**Total Weight = {sum(tgv_weight_inputs.values()):.2f}**")

    # ==========================================================
    # TALENT MATCH EXECUTION BUTTON
    # ==========================================================
    st.markdown("---")
    st.markdown("### 4️⃣ Execute Talent Match Scoring")

    if st.button("💾 Save & Run Talent Match"):
        benchmark_emps = [s.split(" - ")[0] for s in st.session_state.get("benchmark_selected", [])]
        custom_tgv_list = selected_tgv_list if selected_tgv_list else None
        custom_tgv_weight = tgv_weight_inputs

        if not benchmark_emps:
            st.warning("Please select benchmark employees first from Step 1.")
        else:
            with st.spinner("Running Talent Match algorithm..."):
                try:
                    result = supabase.rpc(
                        "talentmatch_r5_fix",
                        {
                            "selected_ids": benchmark_emps,
                            "custom_tgv_list": custom_tgv_list,
                            "custom_tgv_weight": custom_tgv_weight
                        }
                    ).execute()

                    if result.data:
                        df_result_tab2 = pd.DataFrame(result.data)
                        st.session_state["result_tab2"] = df_result_tab2

                        st.success("✅ Talent Match computation completed successfully.")
                        st.dataframe(df_result_tab2.head(20), use_container_width=True)
                    else:
                        st.warning("⚠️ No result returned. Please verify the selected benchmark or weights.")
                except Exception as e:
                    st.error(f"Failed to execute function: {e}")

    # ==========================================================
    # DASHBOARD INSIGHT SECTION (TAB 2)
    # ==========================================================
    if "result_tab2" in st.session_state:
        df_result_tab2 = st.session_state["result_tab2"]

        st.markdown("---")
        st.markdown("## 📊 Insight Visualization")

        # Final Match Distribution
        st.markdown("### Final Match Rate Distribution")
        fig_final = px.histogram(
            df_result_tab2,
            x="final_match_rate",
            nbins=15,
            title="Distribution of Final Match Rates",
            color_discrete_sequence=["#4C78A8"]
        )
        st.plotly_chart(fig_final, use_container_width=True)

        # TGV Match Summary
        st.markdown("### Average Match Rate by TGV")
        tgv_summary_tab2 = (
            df_result_tab2.groupby("tgv_name", as_index=False)
            .agg(avg_tgv_match=("tgv_match_rate", "mean"))
            .sort_values("avg_tgv_match", ascending=False)
        )

        fig_tgv_bar = px.bar(
            tgv_summary_tab2,
            x="tgv_name",
            y="avg_tgv_match",
            title="Average TGV Match Rate (All Employees)",
            color="avg_tgv_match",
            color_continuous_scale="Blues"
        )
        st.plotly_chart(fig_tgv_bar, use_container_width=True)

        # Ranked Employee Table
        st.markdown("### Ranked Employee Results")
        ranked_employees = (
            df_result_tab2.groupby(["employee_id", "fullname", "position_name", "job_level"], as_index=False)
            .agg(final_score=("final_match_rate", "mean"))
            .sort_values("final_score", ascending=False)
        )
        st.dataframe(ranked_employees, use_container_width=True)

        # Optional AI Summary
        st.markdown("### AI Summary Insights")
        try:
            client = OpenAI(
                base_url="https://openrouter.ai/api/v1",
                api_key=os.getenv("OPENROUTER_API_KEY")
            )
            with st.spinner("Generating AI interpretation of results..."):
                avg_rate = ranked_employees["final_score"].mean()
                best_name = ranked_employees.iloc[0]["fullname"]
                best_score = ranked_employees.iloc[0]["final_score"]
                weakest_area = tgv_summary_tab2.iloc[-1]["tgv_name"]

                prompt = f"""
                You are an HR Data Analyst. Based on the latest scoring results:
                - Average final match rate: {avg_rate:.1f}%
                - Top performer: {best_name} ({best_score:.1f}%)
                - Lowest TGV dimension: {weakest_area}

                Write a short, professional 3–5 sentence insight explaining the team's general strengths,
                what makes the top performer excel, and what dimension may need improvement or upskilling.
                """

                response = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": "You are an HR data analyst writing brief insights."},
                        {"role": "user", "content": prompt}
                    ]
                )
                st.success(response.choices[0].message.content)
        except Exception as e:
            st.error(f"AI summary generation failed: {e}")











