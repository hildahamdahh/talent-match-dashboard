# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

# -*- coding: utf-8 -*-
"""Talent Match Intelligence Dashboard (v3.1_fixed_rpc)"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd

# ==========================================================
# 🔗 KONEKSI SUPABASE
# ==========================================================
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "your-anon-key"
supabase: Client = create_client(url, key)

st.title("🎯 Talent Match Intelligence Dashboard (Simplified)")

# ==========================================================
# 🧩 STEP 1: Ambil Semua Employee
# ==========================================================
try:
    response = supabase.table("employee_tv_scores").select("employee_id, fullname").execute()
    data = response.data
except Exception as e:
    st.error(f"Gagal mengambil data: {e}")
    st.stop()

if not data:
    st.warning("⚠️ Tidak ada data employee ditemukan.")
    st.stop()

df = pd.DataFrame(data)

# ==========================================================
# 👥 STEP 2: Pilih Employee
# ==========================================================
st.subheader("1️⃣ Pilih Employee")

employee_options = df["employee_id"].tolist()
selected_ids = st.multiselect("Pilih Employee ID", employee_options)

# ==========================================================
# 🚀 STEP 3: Generate Result
# ==========================================================
if st.button("🚀 Generate AI-Based Job Profile & Variable Score"):
    if selected_ids:
        try:
            # Panggil SQL function (ambil_employee_detail)
            result = supabase.rpc("ambil_employee_detail", {"selected_ids": selected_ids}).execute()

            if result.data:
                result_df = pd.DataFrame(result.data)[["employee_id", "fullname"]].drop_duplicates()
                st.subheader("🏁 Hasil")
                st.dataframe(result_df, use_container_width=True)
            else:
                st.warning("⚠️ Tidak ada data ditemukan untuk employee yang dipilih.")
        except Exception as e:
            st.error(f"Gagal menjalankan query: {e}")
    else:
        st.warning("Silakan pilih minimal satu employee dulu.")









