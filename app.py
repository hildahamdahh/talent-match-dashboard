# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd
import requests
import json

# --- Koneksi ke Supabase ---
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
supabase: Client = create_client(url, key)

st.set_page_config(page_title="Talent Match Intelligence", layout="wide")
st.title("Talent Match Intelligence Dashboard")

# --- Ambil data role dari Supabase ---
response = supabase.table("talent_benchmark").select("role_name, job_level").execute()
roles_df = pd.DataFrame(response.data).drop_duplicates(subset=["role_name", "job_level"])

# --- Dropdown untuk Role ---
role_selected = st.selectbox("Pilih Role", sorted(roles_df["role_name"].unique()))

# --- Auto isi Job Level ---
job_levels = roles_df[roles_df["role_name"] == role_selected]["job_level"].unique()
job_level_selected = st.selectbox("Job Level", job_levels)

# --- Ambil employee benchmark dari role tsb ---
benchmark_response = supabase.table("talent_benchmark")\
    .select("employee_id")\
    .eq("role_name", role_selected)\
    .execute()
benchmark_ids = [row["employee_id"] for row in benchmark_response.data]

# --- Tombol utama ---
if st.button("‚ö° Generate Job Description & Variable Score"):
    with st.spinner("Generating job profile and matching... ‚è≥"):

        # --- 1Ô∏è‚É£ Call OpenRouter for AI Job Profile ---
        prompt = f"""
        Generate a structured job profile for role {role_selected} ({job_level_selected} level).
        Include:
        - Job Requirements (bullet points)
        - Job Description (2-3 sentences)
        - Key Competencies (bullet points)
        - Then suggest JSON variable score weights for categories: technical_skills, soft_skills, experience.
        """

        ai_response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {st.secrets['OPENROUTER_API_KEY']}",
                "Content-Type": "application/json",
            },
            json={
                "model": "openai/gpt-4o-mini",
                "messages": [{"role": "user", "content": prompt}],
            }
        )

        if ai_response.status_code == 200:
            ai_result = ai_response.json()["choices"][0]["message"]["content"]
            st.subheader("üß† AI-Generated Job Profile")
            st.markdown(ai_result)
        else:
            st.error(f"Error OpenRouter: {ai_response.text}")

        # --- 2Ô∏è‚É£ Call Supabase RPC for match scoring ---
        if benchmark_ids:
            match_response = supabase.rpc("talent_match_scoring", {"benchmark_ids": benchmark_ids}).execute()

            if match_response.data:
                df = pd.DataFrame(match_response.data)
                st.success(f"Hasil Match Rate untuk {role_selected} ({job_level_selected})")
                st.dataframe(df)

                # Chart ranking
                rank_df = df[['employee_id', 'final_match_rate']].drop_duplicates().sort_values(
                    by='final_match_rate', ascending=False
                )
                st.bar_chart(rank_df.set_index('employee_id'))
            else:
                st.warning("Tidak ada hasil match rate ditemukan.")
        else:
            st.warning("Tidak ada benchmark employee untuk role ini.")
