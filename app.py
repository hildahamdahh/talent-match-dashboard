# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

# -*- coding: utf-8 -*-
"""Talent Match Intelligence Dashboard (by Hilda Hamdah H)"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd
import plotly.express as px
from openai import OpenAI
import requests, json, re, os
from datetime import datetime


# ==========================================================
# SUPABASE CONNECTION
# ==========================================================
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNja2Rmanhvd2dvd2d4dWZuaG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NDY4NDgsImV4cCI6MjA3NzEyMjg0OH0.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"
supabase: Client = create_client(url, key)

# ==========================================================
# OPENROUTER CLIENT
# ==========================================================
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=st.secrets["OPENROUTER_API_KEY"]
)

# ==========================================================
# PAGE CONFIGURATION
# ==========================================================
st.set_page_config(page_title="Talent Match Intelligence", layout="wide")
st.title("Talent Match Intelligence Dashboard")

# ==========================================================
# TAB SETUP
# ==========================================================
tab1, tab2 = st.tabs(["1. Role Information", "2. Job Details"])

# ==========================================================
# TAB 1: ROLE INFORMATION
# ==========================================================
with tab1:
    # ====== STYLE ======
    st.markdown(
        """
        <style>
        .section-header {font-size: 1.1rem;font-weight: 600;color: #0E1117;border-bottom: 1px solid #e1e1e1;padding-bottom: 0.3rem;margin-bottom: 1rem;}
        .sub-label {font-size: 1.0rem;font-weight: 600;color: #333333;margin-top: 1.5rem;margin-bottom: 0.3rem;}
        </style>
        """,
        unsafe_allow_html=True
    )

    # ==========================================================
    # STEP 1: FETCH EMPLOYEE DATA
    # ==========================================================
    try:
        response = supabase.table("employee_tv_scores").select(
            "employee_id, fullname, position_name, job_level"
        ).eq("rating", 5).execute()
        data = response.data
    except Exception as e:
        st.error(f"Failed to retrieve data: {e}")
        st.stop()

    if not data:
        st.warning("No employee data found (rating = 5).")
        st.stop()

    df = pd.DataFrame(data)

    # ==========================================================
    # STEP 1: ROLE INFORMATION SECTION
    # ==========================================================
    st.markdown('<div class="section-header">1. Role Information</div>', unsafe_allow_html=True)

    # Role Name
    role_names = sorted(df["position_name"].dropna().unique())
    selected_role = st.selectbox("Role Name", ["Ex. Marketing Manager"] + role_names)

    # Job Level
    if selected_role != "Ex. Marketing Manager":
        filtered_for_level = df[df["position_name"] == selected_role]
        job_levels = sorted(filtered_for_level["job_level"].dropna().unique())
    else:
        job_levels = sorted(df["job_level"].dropna().unique())

    selected_job_level = st.selectbox("Job Level", ["Choose your job level"] + job_levels)

    # Role Purpose
    role_purpose = st.text_area(
        "Role Purpose",
        placeholder="1–2 sentences describing the role outcome"
    )
    st.caption("Example: Ensure production targets are met with optimal quality and cost efficiency")

    # ==========================================================
    # EMPLOYEE BENCHMARKING
    # ==========================================================
    st.markdown('<div class="sub-label">Employee Benchmarking</div>', unsafe_allow_html=True)

    if selected_role != "Ex. Marketing Manager":
        df_emp_options = df[df["position_name"] == selected_role].copy()
    else:
        df_emp_options = df.copy()

    if selected_job_level != "Choose your job level":
        df_emp_options = df_emp_options[df_emp_options["job_level"] == selected_job_level]

    df_emp_options = df_emp_options.drop_duplicates(subset=["employee_id"])

    if df_emp_options.empty:
        st.warning("No benchmark employees match the selected position or job level.")
    else:
        df_emp_options["label"] = (
            df_emp_options["employee_id"] + " - " + df_emp_options["fullname"] +
            " (" + df_emp_options["position_name"] + ")"
        )

        selected = st.multiselect(
            "Select Employee Benchmarking (max 3)",
            options=df_emp_options["label"].tolist(),
            max_selections=3,
            placeholder="Choose benchmark employees"
        )
    
    # Save selected benchmarks to session_state for use in other tabs
    if "benchmark_selected" not in st.session_state:
        st.session_state["benchmark_selected"] = []
    
    if selected is not None:
        st.session_state["benchmark_selected"] = selected

    # ==========================================================
    # CUSTOM TGV WEIGHT ADJUSTMENT
    # ==========================================================
    st.markdown("### Custom TGV Weight Adjustment")
    st.caption("Adjust the competency (TGV) weights according to the role. Default weights are shown below. If not modified, default weights will be used. The total should equal 1.00.")
    
    default_weights = {
        "Adaptability & Stress Tolerance": 0.06,
        "Cognitive Complexity & Problem-Solving": 0.25,
        "Conscientiousness & Reliability": 0.10,
        "Creativity & Innovation Orientation": 0.02,
        "Cultural & Values Urgency": 0.02,
        "Leadership & Influence": 0.30,
        "Motivation & Drive": 0.20,
        "Social Orientation & Collaboration": 0.05
    }
    
    custom_tgv_dict = {}
    total_weight = 0
    
    cols = st.columns(4)
    for i, (tgv, default_val) in enumerate(default_weights.items()):
        with cols[i % 4]:
            weight = st.slider(
                tgv,
                min_value=0.00,
                max_value=0.50,
                step=0.01,
                value=default_val,
                key=f"tgv_{i}"
            )
            custom_tgv_dict[tgv] = weight
            total_weight += weight
    
    st.markdown(f"**Total Weight = {total_weight:.2f}**")
    
    if abs(total_weight - 1.0) > 0.01:
        st.warning("Total weight should be close to 1.00 for proportional scoring.")

    # Save custom TGV weights to session_state
    st.session_state["custom_tgv_weight"] = custom_tgv_dict

    # ==========================================================
    # GENERATE JOB PROFILE & VARIABLE SCORE
    # ==========================================================
    st.markdown("---")
    
    if "job_generated" not in st.session_state:
        st.session_state.job_generated = False
    if "df_result" not in st.session_state:
        st.session_state.df_result = None
    if "top_tgv_df" not in st.session_state:
        st.session_state.top_tgv_df = None
    
    
    # AI Job Profile Generator (via OpenRouter)
    def generate_job_profile(role_name, job_level, role_purpose):
        try:
            OPENROUTER_API_KEY = st.secrets["OPENROUTER_API_KEY"]
        except Exception:
            st.error("OPENROUTER_API_KEY not set in secrets.")
            return None
    
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://talent-match-intelligence.streamlit.app",
            "X-Title": "Talent Match Intelligence",
            "Content-Type": "application/json",
        }
    
        prompt = f"""
        You are an HR Talent Intelligence Assistant.
        Generate a concise, structured Job Profile Overview for a {job_level} {role_name}.
        Include:
        1) Job Requirements
        2) Job Description
        3) Key Competencies
        Context: {role_purpose}
        """
    
        payload = {
            "model": "openai/gpt-4o-mini",
            "messages": [
                {"role": "system", "content": "You generate concise job profiles for HR professionals."},
                {"role": "user", "content": prompt}
            ]
        }
    
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            data=json.dumps(payload)
        )
    
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"Error from OpenRouter: {response.status_code} - {response.text}"
    
    
    # ==========================================================
    # GENERATE AI JOB PROFILE + VARIABLE SCORING VIA RPC
    # ==========================================================
    if st.button("Generate AI-Based Job Profile & Variable Score"):
        if not (selected and len(selected) > 0):
            st.warning("Select at least one benchmark employee.")
        elif not selected_role or not selected_job_level:
            st.warning("Please complete the Role Name and Job Level fields.")
        else:
            with st.spinner("Generating AI-based job profile..."):
                # Step 1: Generate AI Job Profile Overview
                ai_profile = generate_job_profile(selected_role, selected_job_level, role_purpose)
    
                if ai_profile and not ai_profile.startswith("⚠️"):
                    st.subheader("AI-Generated Job Profile Overview")
    
                    clean_text = re.sub(r"<[^>]*>", "", ai_profile)
                    clean_text = clean_text.replace("&nbsp;", " ").replace("&amp;", "&").strip()
    
                    st.write(clean_text)
                    st.session_state["ai_job_profile_overview"] = clean_text
                    st.success("AI Job Profile successfully generated!")
                else:
                    st.error("Failed to generate Job Profile. Please try again.")
    
            # Step 2: Proceed with Variable Scoring via Supabase RPC
            with st.spinner("Calculating Variable Scores..."):
                selected_ids = [s.split(" - ")[0] for s in selected]
                try:
                    result = supabase.rpc(
                        "talentmatch_r5_fix",
                        {
                            "selected_ids": selected_ids,
                            "custom_tgv_list": None,
                            "custom_tgv_weight": custom_tgv_dict  # Sent as JSONB
                        }).execute()
                    
                    if result.data:
                        df_result = pd.DataFrame(result.data)
                        desired_cols = [
                            "employee_id", "fullname", "position_name", "job_level", "rating",
                            "tgv_name", "category_type", "baseline_score", "tgv_weight",
                            "user_score", "tgv_match_rate", "final_match_rate"
                        ]
                        available_cols = [c for c in desired_cols if c in df_result.columns]
                        df_result = df_result[available_cols].copy()
    
                        df_result["final_match_rate"] = pd.to_numeric(df_result["final_match_rate"], errors="coerce")
                        df_result["tgv_match_rate"] = pd.to_numeric(df_result["tgv_match_rate"], errors="coerce")
    
                        top_tgv_df = (
                            df_result.sort_values(["employee_id", "tgv_match_rate"], ascending=[True, False])
                            .groupby("employee_id", as_index=False)
                            .first()
                            .loc[:, ["employee_id", "fullname", "position_name", "job_level", "tgv_name", "tgv_match_rate", "final_match_rate"]]
                        )
    
                        top_tgv_df = top_tgv_df.sort_values(by="final_match_rate", ascending=False).reset_index(drop=True)
    
                        st.session_state.job_generated = True
                        st.session_state.df_result = df_result
                        st.session_state.top_tgv_df = top_tgv_df
    
                        st.success("Variable Scoring successfully completed!")
                    else:
                        st.warning("No results found for selected employees.")
                except Exception as e:
                    st.error(f"Failed to execute query: {e}")










