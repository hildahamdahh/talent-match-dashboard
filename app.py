# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

# -*- coding: utf-8 -*-
"""Talent Match Intelligence Dashboard (v3.1_fixed_rpc)"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd

# Supabase connection
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNja2Rmanhvd2dvd2d4dWZuaG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NDY4NDgsImV4cCI6MjA3NzEyMjg0OH0.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"
supabase: Client = create_client(url, key)

st.title("üéØ Talent Match Intelligence Dashboard (Simplified)")

# üîπ Load all benchmark employees (rating 5)
response = supabase.table("employee_tv_scores").select(
    "employee_id, fullname, role_name, rating"
).eq("rating", 5).execute()

if response.data:
    df = pd.DataFrame(response.data)

    st.subheader("1Ô∏è‚É£ Pilih Employee Benchmark")
    employee_options = df["employee_id"].tolist()
    selected_ids = st.multiselect("Pilih Employee ID", employee_options)

    if st.button("üöÄ Generate AI-Based Job Profile & Variable Score"):
        if selected_ids:
            # Call SQL function with selected employee IDs
            result = supabase.rpc("ambil_employee_detail", {"selected_ids": selected_ids}).execute()

            if result.data:
                result_df = pd.DataFrame(result.data)
                st.dataframe(result_df)
            else:
                st.warning("‚ö†Ô∏è Tidak ada data ditemukan untuk employee yang dipilih.")
        else:
            st.warning("Silakan pilih minimal satu employee dulu.")
else:
    st.warning("‚ö†Ô∏è Tidak ada data benchmark ditemukan.")








