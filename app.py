# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd
import requests
import json
from io import StringIO

# ==========================================================
# üîó KONEKSI SUPABASE
# ==========================================================
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNja2Rmanhvd2dvd2d4dWZuaG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NDY4NDgsImV4cCI6MjA3NzEyMjg0OH0.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"
supabase: Client = create_client(url, key)

# ==========================================================
# üîë OPENROUTER API
# ==========================================================

OPENROUTER_API_KEY = st.secrets["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"]

# ==========================================================
# ‚öôÔ∏è KONFIGURASI HALAMAN
# ==========================================================
st.set_page_config(page_title="Talent Match Intelligence", layout="wide")
st.title("üéØ Talent Match Intelligence Dashboard")

# ==========================================================
# üß© STEP 1: Ambil data benchmark dari Supabase
# ==========================================================
try:
    response = supabase.table("talent_benchmark").select("*").execute()
    benchmark_data = response.data
except Exception as e:
    st.error(f"Gagal mengambil data: {e}")
    st.stop()

if not benchmark_data:
    st.warning("Tabel 'talent_benchmark' masih kosong.")
    st.stop()

df_benchmark = pd.DataFrame(benchmark_data)

# ==========================================================
# üß≠ STEP 2: Input Role Information
# ==========================================================
st.subheader("1Ô∏è‚É£ Role Information")

role_names = sorted(df_benchmark["role_name"].dropna().unique())
selected_role = st.selectbox("Role Name", role_names)

filtered_df = df_benchmark[df_benchmark["role_name"] == selected_role]
job_levels = filtered_df["job_level"].dropna().unique()
selected_job_level = st.selectbox("Job Level", job_levels)

role_purpose = st.text_area(
    "Role Purpose",
    placeholder="Contoh: Ensure production targets are met with optimal quality and cost efficiency"
)

# ==========================================================
# üë• STEP 3: Employee Benchmark
# ==========================================================
st.subheader("2Ô∏è‚É£ Employee Benchmarking")

employee_options = [
    f"{row['employee_id']} - {row['fullname']} ({row['role_name']})"
    for _, row in filtered_df.iterrows()
]
selected_employees = st.multiselect(
    "Pilih maksimal 3 karyawan sebagai benchmark:",
    options=employee_options,
    max_selections=3
)

selected_ids = [emp.split(" - ")[0] for emp in selected_employees]

# ==========================================================
# üß† STEP 4: AI Job Profile Generator
# ==========================================================
def generate_job_profile(role_name, job_level, role_purpose):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }

    prompt = f"""
    You are an HR Talent Intelligence Assistant.
    Generate a concise and structured job profile for a {job_level} {role_name}.
    Include exactly 3 rows in Markdown table format:
    Columns: [Column, Desc]
    Sections:
    1. Job Requirements
    2. Job Description
    3. Key Competencies
    Each section should have bullet-style concise text in the "Desc" column.
    Context: {role_purpose}
    """

    payload = {
        "model": "openai/gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "You generate structured HR job profiles in markdown table format."},
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions",
                                 headers=headers,
                                 data=json.dumps(payload))
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"‚ö†Ô∏è Error dari OpenRouter: {response.status_code} - {response.text}"
    except Exception as e:
        return f"‚ö†Ô∏è Terjadi error saat menghubungi OpenRouter: {e}"

# ==========================================================
# üöÄ STEP 5: COMBINED BUTTON (SQL + AI)
# ==========================================================
if st.button("‚ú® Generate Job Profile & Variable Score"):
    if not selected_ids:
        st.warning("Pilih minimal 1 benchmark employee terlebih dahulu.")
    else:
        with st.spinner("‚è≥ Menjalankan analisis dan AI generation..."):
            try:
                # --- 1Ô∏è‚É£ Jalankan Function di Supabase ---
                result = supabase.rpc("talent_match_scoring", {"benchmark_ids": selected_ids}).execute()
                data = result.data

                if data:
                    df_result = pd.DataFrame(data)
                    st.success(f"Hasil untuk role: {selected_role} (Job Level: {selected_job_level})")

                    rank_df = (
                        df_result[["employee_id", "final_match_rate"]]
                        .drop_duplicates()
                        .sort_values(by="final_match_rate", ascending=False)
                    )

                    st.subheader("üìä Final Match Rate per Employee")
                    st.dataframe(rank_df)
                    st.bar_chart(rank_df.set_index("employee_id"))
                else:
                    st.warning("Tidak ada hasil ditemukan dari scoring.")

                # --- 2Ô∏è‚É£ Generate AI Job Profile ---
                ai_profile = generate_job_profile(selected_role, selected_job_level, role_purpose)

                st.subheader("üß† AI-Generated Job Profile")

                # Coba ubah hasil markdown AI ke DataFrame
                try:
                    markdown_table = "\n".join([line for line in ai_profile.splitlines() if "|" in line])
                    if markdown_table:
                        # Hilangkan baris separator markdown (---)
                        markdown_table = "\n".join([l for l in markdown_table.split("\n") if "---" not in l])

                        # Parse markdown menjadi DataFrame
                        df_table = pd.read_csv(StringIO(markdown_table), sep="|", engine="python")
                        df_table = df_table.dropna(axis=1, how="all")  # drop kolom kosong
                        df_table = df_table.apply(lambda x: x.str.strip() if x.dtype == "object" else x)
                        df_table = df_table[1:-1]  # drop baris kosong

                        # Tampilkan hasil seperti di contoh referensi
                        st.dataframe(df_table, use_container_width=True)
                    else:
                        st.markdown(ai_profile)
                except Exception:
                    st.markdown(ai_profile)

            except Exception as e:
                st.error(f"Terjadi kesalahan saat menjalankan analisis: {e}")

