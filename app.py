# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd

# --- Koneksi ke Supabase ---
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiOiJjY2tkZmp4b3dnb3dneHVmbmhuaSIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzYxNTQ2ODQ4LCJleHAiOjIwNzcxMjI4NDh9.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"
supabase: Client = create_client(url, key)

st.set_page_config(page_title="Talent Match Intelligence", layout="wide")
st.title("Talent Match Intelligence Dashboard")

# --- Ambil data dari tabel benchmark ---
response = supabase.table("talent_benchmark").select("*").execute()
data = response.data
df_benchmark = pd.DataFrame(data)

# --- Dropdown bertingkat ---
role_name = st.selectbox("Pilih Role Name", sorted(df_benchmark["role_name"].unique()))

# Filter job level sesuai role
filtered_job = df_benchmark[df_benchmark["role_name"] == role_name]
job_level = st.selectbox("Pilih Job Level", sorted(filtered_job["job_level"].unique()))

# Filter employee sesuai role + job level
filtered_emp = filtered_job[filtered_job["job_level"] == job_level]
employee_ids = filtered_emp["employee_id"].tolist()
selected_employees = st.multiselect("Pilih Employee Benchmark (max 3)", employee_ids, max_selections=3)

# --- Tambahkan field deskripsi role purpose ---
role_purpose = st.text_area("Role Purpose", placeholder="Deskripsikan tujuan role ini secara singkat...")

if st.button("üîç Jalankan Analisis"):
    if not selected_employees:
        st.warning("Pilih minimal 1 employee untuk benchmark.")
    else:
        data = supabase.rpc("talent_match_scoring", {"benchmark_ids": selected_employees}).execute()

        if data.data:
            df_result = pd.DataFrame(data.data)
            st.success(f"Hasil untuk benchmark: {', '.join(selected_employees)}")
            st.dataframe(df_result)

            # --- Tampilkan final match rate ranking ---
            rank_df = df_result[['employee_id', 'final_match_rate']].drop_duplicates().sort_values(
                by='final_match_rate', ascending=False
            )
            st.bar_chart(rank_df.set_index('employee_id'))
        else:
            st.warning("Tidak ada hasil ditemukan.")
