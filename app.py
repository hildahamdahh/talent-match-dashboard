# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd

# --- Koneksi ke Supabase ---
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNja2Rmanhvd2dvd2d4dWZuaG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NDY4NDgsImV4cCI6MjA3NzEyMjg0OH0.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"
supabase: Client = create_client(url, key)

st.set_page_config(page_title="Talent Match Intelligence", layout="wide")
st.title("Talent Match Intelligence Dashboard")

# --- Input benchmark employee IDs ---
benchmark_input = st.text_input(
    "Masukkan Employee ID Benchmark (pisahkan dengan koma)",
    "EMP100958, EMP101451, EMP100362"
)

if st.button("üîç Jalankan Analisis"):
    emp_ids = [x.strip() for x in benchmark_input.split(",") if x.strip()]
    array_input = "{" + ",".join(emp_ids) + "}"

    # --- Panggil function di Supabase ---
    data = supabase.rpc("talent_match_scoring", {"benchmark_ids": emp_ids}).execute()

    if data.data:
        df = pd.DataFrame(data.data)
        st.success(f"Hasil untuk benchmark: {', '.join(emp_ids)}")
        st.dataframe(df)

        # --- Tampilkan final match rate ranking ---
        rank_df = df[['employee_id', 'final_match_rate']].drop_duplicates().sort_values(
            by='final_match_rate', ascending=False
        )
        st.bar_chart(rank_df.set_index('employee_id'))
    else:
        st.warning("Tidak ada hasil ditemukan.")
