# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd

# --- Koneksi ke Supabase ---
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNja2Rmanhvd2dvd2d4dWZuaG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NDY4NDgsImV4cCI6MjA3NzEyMjg0OH0.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"
supabase: Client = create_client(url, key)

# --- Konfigurasi halaman ---
st.set_page_config(page_title="Talent Match Intelligence", layout="wide")
st.title("üéØ Talent Match Intelligence Dashboard")

# ==========================================================
# üß© STEP 1: Ambil data benchmark dari Supabase
# ==========================================================
try:
    response = supabase.table("talent_benchmark").select("*").execute()
    benchmark_data = response.data
except Exception as e:
    st.error(f"Gagal mengambil data: {e}")
    st.stop()

if not benchmark_data:
    st.warning("Tabel 'talent_benchmark' masih kosong.")
    st.stop()

df_benchmark = pd.DataFrame(benchmark_data)

# ==========================================================
# üß≠ STEP 2: Input dari user (parameter runtime)
# ==========================================================

st.subheader("1Ô∏è‚É£ Role Information")

# --- Pilih Role Name ---
role_names = sorted(df_benchmark["role_name"].dropna().unique())
selected_role = st.selectbox("Role Name", role_names)

# --- Job Level otomatis mengikuti role yang dipilih ---
job_levels = df_benchmark.loc[df_benchmark["role_name"] == selected_role, "job_level"].unique()
selected_job_level = st.selectbox("Job Level", job_levels)

# --- Role Purpose (manual input) ---
role_purpose = st.text_area(
    "Role Purpose",
    placeholder="Contoh: Ensure production targets are met with optimal quality and cost efficiency"
)

# ==========================================================
# üë• STEP 3: Pilih Employee Benchmark
# ==========================================================
st.subheader("2Ô∏è‚É£ Employee Benchmarking")

employee_options = [
    f"{row['employee_id']} - {row['fullname']} ({row['role_name']})"
    for _, row in df_benchmark.iterrows()
]
selected_employees = st.multiselect(
    "Pilih maksimal 3 karyawan sebagai benchmark:",
    options=employee_options,
    max_selections=3
)

# Ambil employee_id-nya saja
selected_ids = [emp.split(" - ")[0] for emp in selected_employees]

# ==========================================================
# üöÄ STEP 4: Jalankan Analisis
# ==========================================================
if st.button("üîç Jalankan Analisis"):
    if not selected_ids:
        st.warning("Pilih minimal 1 benchmark employee terlebih dahulu.")
    else:
        try:
            # Jalankan function di Supabase
            result = supabase.rpc("talent_match_scoring", {"benchmark_ids": selected_ids}).execute()
            data = result.data

            if data:
                df_result = pd.DataFrame(data)
                st.success(f"Hasil untuk role: {selected_role} (Job Level: {selected_job_level})")
                st.dataframe(df_result)

                # --- Visualisasi Final Match Rate ---
                rank_df = (
                    df_result[["employee_id", "final_match_rate"]]
                    .drop_duplicates()
                    .sort_values(by="final_match_rate", ascending=False)
                )

                st.subheader("üìä Final Match Rate per Employee")
                st.bar_chart(rank_df.set_index("employee_id"))

            else:
                st.warning("Tidak ada hasil ditemukan.")
        except Exception as e:
            st.error(f"Terjadi kesalahan saat menjalankan analisis: {e}")
