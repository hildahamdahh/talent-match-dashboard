# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

# -*- coding: utf-8 -*-
"""Talent Match Intelligence Dashboard (v3.1_fixed_rpc)"""

import streamlit as st
from supabase import create_client, Client
import pandas as pd

# ==========================================================
# üîó KONEKSI SUPABASE
# ==========================================================
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNja2Rmanhvd2dvd2d4dWZuaG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NDY4NDgsImV4cCI6MjA3NzEyMjg0OH0.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"
supabase: Client = create_client(url, key)

st.set_page_config(page_title="Talent Match Intelligence", layout="wide")
st.markdown(
    """
    <style>
    /* Style Section Header */
    .section-header {
        font-size: 1.1rem;
        font-weight: 600;
        color: #0E1117;
        border-bottom: 1px solid #e1e1e1;
        padding-bottom: 0.3rem;
        margin-bottom: 1rem;
    }

    /* Style Sub Label (smaller text) */
    .sub-label {
        font-size: 1.0rem;
        font-weight: 600;
        color: #333333;
        margin-top: 1.5rem;
        margin-bottom: 0.3rem;
    }

    /* Make Streamlit widgets spacing tighter */
    div[data-baseweb="select"] > div {
        min-height: 2rem;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.title("üéØ Talent Match Intelligence Dashboard")

# ==========================================================
# üß© STEP 1: Ambil Semua Employee
# ==========================================================
try:
    response = supabase.table("employee_tv_scores").select(
        "employee_id, fullname, position_name, job_level"
    ).eq("rating", 5).execute()
    data = response.data
except Exception as e:
    st.error(f"Gagal mengambil data: {e}")
    st.stop()

if not data:
    st.warning("‚ö†Ô∏è Tidak ada data employee ditemukan (rating = 5).")
    st.stop()

df = pd.DataFrame(data)

# ==========================================================
# üß≠ STEP 1: Role Information
# ==========================================================
st.markdown('<div class="section-header">1. Role Information</div>', unsafe_allow_html=True)

# Role Name
role_names = sorted(df["position_name"].dropna().unique())
selected_role = st.selectbox("Role Name", ["Ex. Marketing Manager"] + role_names)

# Job Level
if selected_role != "Ex. Marketing Manager":
    filtered_for_level = df[df["position_name"] == selected_role]
    job_levels = sorted(filtered_for_level["job_level"].dropna().unique())
else:
    job_levels = sorted(df["job_level"].dropna().unique())

selected_job_level = st.selectbox("Job Level", ["Choose your job level"] + job_levels)

# Role Purpose
role_purpose = st.text_area(
    "Role Purpose",
    placeholder="1‚Äì2 sentences to describe role outcome"
)

st.caption("Example: Ensure production targets are met with optimal quality and cost efficiency")

# ==========================================================
# üë• Employee Benchmarking (inline section)
# ==========================================================
st.markdown('<div class="sub-label">Employee Benchmarking</div>', unsafe_allow_html=True)

# Filter sesuai role dan job level yang dipilih
if selected_role != "Ex. Marketing Manager":
    df_emp_options = df[df["position_name"] == selected_role].copy()
else:
    df_emp_options = df.copy()

if selected_job_level != "Choose your job level":
    df_emp_options = df_emp_options[df_emp_options["job_level"] == selected_job_level]

# Pastikan distinct employee_id
df_emp_options = df_emp_options.drop_duplicates(subset=["employee_id"])

if df_emp_options.empty:
    st.warning("‚ö†Ô∏è Tidak ada employee benchmark yang cocok dengan posisi/job level pilihan.")
else:
    # Tampilkan label: EMP001 - Hilda (Data Analyst)
    df_emp_options["label"] = (
        df_emp_options["employee_id"] + " - " + df_emp_options["fullname"] +
        " (" + df_emp_options["position_name"] + ")"
    )

    selected = st.multiselect(
        "Select Employee Benchmarking (max 3)",
        options=df_emp_options["label"].tolist(),
        max_selections=3,
        placeholder="Choose employee benchmarking"
    )

# ==========================================================
# üöÄ STEP 3: Generate Job Profile & Variable Score
# ==========================================================
st.markdown("---")
if st.button("‚ú® Generate AI-Based Job Profile & Variable Score"):
    if not (selected and len(selected) > 0):
        st.warning("‚ö†Ô∏è Pilih minimal 1 benchmark employee terlebih dahulu.")
    else:
        selected_ids = [s.split(" - ")[0] for s in selected]
        try:
            # üîπ Jalankan function ambil_employee_detail
            result = supabase.rpc("ambil_employee_detail", {"selected_ids": selected_ids}).execute()

            if result.data:
                df_result = pd.DataFrame(result.data)

                # üîπ Urutkan kolom sesuai output final
                desired_cols = [
                    "employee_id", "fullname", "position_name", "job_level",
                    "tgv_name", "tv_name", "tv_weight", "tgv_weight","baseline_score", "user_score","tv_match_rate","tgv_match_rate",
                    "final_match_rate","category_type","rating"
                ]

                available_cols = [c for c in desired_cols if c in df_result.columns]
                df_result = df_result[available_cols]

                # üîπ Tampilkan hasil di Streamlit
                st.subheader("üèÅ Hasil Benchmarking (TV & TGV Baseline)")
                st.dataframe(df_result, use_container_width=True)

            else:
                st.warning("‚ö†Ô∏è Tidak ada data ditemukan untuk employee yang dipilih.")

        except Exception as e:
            st.error(f"Gagal menjalankan query: {e}")












