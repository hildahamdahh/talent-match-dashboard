# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXC7zJPr4XJ4uHj5cjOkW1G50y_8Vbj-
"""

# ==========================================================
# üéØ Talent Match Intelligence Dashboard (FINAL + JOB DETAILS)
# ==========================================================
import streamlit as st
from supabase import create_client, Client
import pandas as pd
import requests
import json
import re
from datetime import datetime

# --- Koneksi ke Supabase ---
url = "https://cckdfjxowgowgxufnhnj.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNja2Rmanhvd2dvd2d4dWZuaG5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1NDY4NDgsImV4cCI6MjA3NzEyMjg0OH0.JXb-yqbBu_OSLpG03AlnfZI5K_eRKyhfGw4glE0Cj0o"
supabase: Client = create_client(url, key)

# --- Page Setup ---
st.set_page_config(page_title="Talent Match Intelligence", layout="wide")
st.title("üéØ Talent Match Intelligence Dashboard")

# ==========================================================
# üß© STEP 1: Ambil data benchmark dari Supabase
# ==========================================================
try:
    response = supabase.table("talent_benchmark").select("*").execute()
    benchmark_data = response.data
except Exception as e:
    st.error(f"Gagal mengambil data: {e}")
    st.stop()

if not benchmark_data:
    st.warning("Tabel 'talent_benchmark' masih kosong.")
    st.stop()

df_benchmark = pd.DataFrame(benchmark_data)

# ==========================================================
# üß≠ STEP 2: Input dari user (parameter runtime)
# ==========================================================
st.subheader("1Ô∏è‚É£ Role Information")

role_names = sorted(df_benchmark["role_name"].dropna().unique())
selected_role = st.selectbox("Role Name", role_names)

filtered_df = df_benchmark[df_benchmark["role_name"] == selected_role]
job_levels = filtered_df["job_level"].dropna().unique()
selected_job_level = st.selectbox("Job Level", job_levels)

role_purpose = st.text_area(
    "Role Purpose",
    placeholder="Contoh: Ensure production targets are met with optimal quality and cost efficiency"
)

# ==========================================================
# üë• STEP 3: Pilih Employee Benchmark
# ==========================================================
st.subheader("2Ô∏è‚É£ Employee Benchmarking")

employee_options = [
    f"{row['employee_id']} - {row['fullname']} ({row['role_name']})"
    for _, row in filtered_df.iterrows()
]
selected_employees = st.multiselect(
    "Pilih maksimal 3 karyawan sebagai benchmark:",
    options=employee_options,
    max_selections=3
)
selected_ids = [emp.split(" - ")[0] for emp in selected_employees]

# ==========================================================
# üß† STEP 4: AI Job Profile Generator (OpenRouter)
# ==========================================================
def generate_job_profile(role_name, job_level, role_purpose):
    try:
        OPENROUTER_API_KEY = st.secrets["OPENROUTER_API_KEY"]
    except Exception:
        st.error("‚ùå OPENROUTER_API_KEY belum diset di secrets.")
        return None

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://talent-match-intelligence.streamlit.app",
        "X-Title": "Talent Match Intelligence",
        "Content-Type": "application/json",
    }

    prompt = f"""
    You are an HR Talent Intelligence Assistant.
    Generate a clear, structured job profile for a {job_level} {role_name}.
    Include:
    1Ô∏è‚É£ Job Requirements
    2Ô∏è‚É£ Job Description
    3Ô∏è‚É£ Key Competencies
    Context: {role_purpose}
    """

    payload = {
        "model": "openai/gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "You generate concise job profiles for HR."},
            {"role": "user", "content": prompt}
        ]
    }

    response = requests.post(
        "https://openrouter.ai/api/v1/chat/completions",
        headers=headers,
        data=json.dumps(payload)
    )

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return f"‚ö†Ô∏è Error dari OpenRouter: {response.status_code} - {response.text}"


# ==========================================================
# üöÄ STEP 5: Generate Job Profile (AI only)
# ==========================================================
st.markdown("---")
st.subheader("2Ô∏è‚É£ Generate AI-Based Job Profile & Variable Score")

if st.button("‚ú® Generate Job Profile & Variable Score"):
    if not selected_ids:
        st.warning("‚ö†Ô∏è Pilih minimal 1 benchmark employee terlebih dahulu.")
    else:
        with st.spinner("ü§ñ Generating AI-based job profile..."):
            ai_profile = generate_job_profile(selected_role, selected_job_level, role_purpose)

            if ai_profile and not ai_profile.startswith("‚ö†Ô∏è"):
                st.subheader("üß† AI-Generated Job Profile")

                clean_text = re.sub(r"<[^>]*>", "", ai_profile)
                clean_text = clean_text.replace("&nbsp;", " ").replace("&amp;", "&").strip()

                st.write(clean_text)
                st.session_state["ai_job_profile"] = clean_text
                st.success("‚úÖ AI Job Profile berhasil dihasilkan!")
            else:
                st.warning(ai_profile)

# ==========================================================
# üß† Generate AI-Based Job Details (Responsibilities & Competencies)
# ==========================================================
def generate_job_details(role_name, job_level):
    """
    Generate two lists: responsibilities & competencies for a given role and level.
    Uses OpenRouter GPT-4o-mini.
    """
    try:
        OPENROUTER_API_KEY = st.secrets["OPENROUTER_API_KEY"]
    except Exception:
        st.error("‚ùå OPENROUTER_API_KEY belum diset di secrets.")
        return None

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://talent-match-intelligence.streamlit.app",
        "X-Title": "Talent Match Intelligence",
        "Content-Type": "application/json",
    }

    prompt = f"""
    You are an HR assistant helping define job details.
    Generate 2 concise bullet lists:
    1) Key Responsibilities (10‚Äì12 items)
    2) Key Competencies (10‚Äì12 items, each 1‚Äì3 words only)
    for a {job_level} {role_name}.
    Keep them short, specific, and business-relevant.
    Return in JSON format like this:
    {{
      "responsibilities": ["item1", "item2", ...],
      "competencies": ["item1", "item2", ...]
    }}
    """

    payload = {
        "model": "openai/gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "You generate short, structured job detail lists for HR systems."},
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            data=json.dumps(payload),
            timeout=30
        )
    except Exception as e:
        st.error(f"‚ö†Ô∏è Gagal request ke OpenRouter: {e}")
        return None

    if response.status_code != 200:
        st.error(f"‚ö†Ô∏è Error dari OpenRouter: {response.status_code}")
        return None

    try:
        content = response.json()["choices"][0]["message"]["content"]
        clean_json = re.sub(r"```json|```", "", content).strip()
        return json.loads(clean_json)
    except Exception as e:
        st.error(f"‚ö†Ô∏è Gagal parsing hasil generate job details: {e}")
        st.text(content)
        return None


# ==========================================================
# üéØ STEP 6: AI-Based Job Details (Responsibilities & Competencies)
# ==========================================================
st.markdown("---")
st.subheader("3Ô∏è‚É£ Job Details (AI Suggestions + Editable Lists)")
st.caption("Tambahkan atau hapus sesuai kebutuhan. AI akan regenerate otomatis jika role berubah.")

# --- Regenerate Job Details jika Role/Level berubah ---
if (
    "job_details_ai" not in st.session_state
    or st.session_state.get("last_role") != selected_role
    or st.session_state.get("last_job_level") != selected_job_level
):
    with st.spinner("ü§ñ Generating AI-based job details..."):
        ai_details = generate_job_details(selected_role, selected_job_level)
        if ai_details:
            st.session_state["job_details_ai"] = ai_details
            st.session_state["last_role"] = selected_role
            st.session_state["last_job_level"] = selected_job_level
        else:
            st.stop()

ai_details = st.session_state["job_details_ai"]

# --- Session states for selections ---
if "selected_responsibilities" not in st.session_state:
    st.session_state["selected_responsibilities"] = []
if "selected_competencies" not in st.session_state:
    st.session_state["selected_competencies"] = []

# --- Reusable render function ---
def render_detail_section(title, key, ai_options):
    st.markdown(f'<div class="small-title">{title}</div>', unsafe_allow_html=True)

    cols = st.columns([6, 1])
    with cols[0]:
        selected = st.selectbox(f"Select {title.lower()}", options=[""] + ai_options, key=f"select_{key}", label_visibility="collapsed")
    with cols[1]:
        if st.button("‚ûï Add", key=f"add_{key}"):
            if selected and selected not in st.session_state[key]:
                st.session_state[key].append(selected)
                st.rerun()

    for i, item in enumerate(st.session_state[key]):
        st.markdown(f"""
            <div class="item-row">
                <div class="item-text">‚Ä¢ {item}</div>
                <div>
                    <button class="small-btn" style="border:none;background:none;">‚ùå</button>
                </div>
            </div>
        """, unsafe_allow_html=True)

# --- Render AI Job Details ---
render_detail_section("Key Responsibilities", "selected_responsibilities", ai_details["responsibilities"])
render_detail_section("Key Competencies", "selected_competencies", ai_details["competencies"])

# ==========================================================
# üß† STEP 7: AI Mapping to TGV
# ==========================================================
def map_job_details_to_tgv(responsibilities, competencies):
    try:
        OPENROUTER_API_KEY = st.secrets["OPENROUTER_API_KEY"]
    except Exception:
        st.error("‚ùå OPENROUTER_API_KEY belum diset di secrets.")
        return None

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://talent-match-intelligence.streamlit.app",
        "X-Title": "Talent Match Intelligence",
        "Content-Type": "application/json",
    }

    prompt = f"""
    You are an HR data-mapping assistant.
    Map the following job details into internal competency *domains* (tgv_name)
    used in the Talent Match Intelligence system.

    Responsibilities:
    {responsibilities}

    Competencies:
    {competencies}

    Choose only from this list of valid TGV names:
    - Adaptability & Stress Tolerance
    - Cognitive Complexity & Problem-Solving
    - Conscientiousness & Reliability
    - Creativity & Innovation Orientation
    - Cultural & Values Urgency
    - Leadership & Influence
    - Motivation & Drive
    - Social Orientation & Collaboration

    Return only JSON with one array:
    {{
      "tgv_name": ["Leadership & Influence", "Motivation & Drive"]
    }}
    """

    payload = {
        "model": "openai/gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "You map HR job details to internal competency domains."},
            {"role": "user", "content": prompt}
        ]
    }

    response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, data=json.dumps(payload))
    if response.status_code == 200:
        try:
            content = response.json()["choices"][0]["message"]["content"]
            clean_json = re.sub(r"```json|```", "", content).strip()
            return json.loads(clean_json)
        except Exception as e:
            st.error(f"‚ö†Ô∏è Gagal parsing hasil mapping: {e}")
            st.text(content)
            return None
    else:
        st.error(f"‚ö†Ô∏è Error dari OpenRouter: {response.status_code}")
        return None

# ==========================================================
# üöÄ STEP 8: Save & Run Talent Match (SQL + Full Result)
# ==========================================================
st.markdown("---")
st.subheader("4Ô∏è‚É£ Save & Run Talent Match")

if st.button("üíæ Save & Run Talent Match"):
    try:
        ai_data = st.session_state.get("job_details_ai", {})
        if not ai_data:
            st.warning("‚ö†Ô∏è Generate Job Details terlebih dahulu sebelum menjalankan Talent Match.")
            st.stop()

        # --- Simpan Job Details ke Supabase ---
        data_insert = {
            "role_name": selected_role,
            "job_level": selected_job_level,
            "responsibilities": st.session_state["selected_responsibilities"],
            "competencies": st.session_state["selected_competencies"],
            "created_at": datetime.now().isoformat()
        }
        supabase.table("job_details").insert(data_insert).execute()
        st.success("‚úÖ Job Details berhasil disimpan ke Supabase!")

        # --- AI Mapping Job Details ‚Üí TGV Domains ---
        with st.spinner("ü§ñ Mapping Job Details ke TGV domains..."):
            mapping_result = map_job_details_to_tgv(
                st.session_state["selected_responsibilities"],
                st.session_state["selected_competencies"]
            )

        if mapping_result and "tgv_name" in mapping_result:
            custom_tgv_list = mapping_result["tgv_name"]
            st.info(f"üîç Kompetensi domain relevan: {', '.join(custom_tgv_list)}")

            # --- Jalankan SQL Function Talent Match Scoring ---
            with st.spinner("üìä Menghitung Final Match Rate..."):
                result = supabase.rpc(
                    "talent_match_scoring",
                    {
                        "benchmark_ids": selected_ids,
                        "custom_tgv_list": custom_tgv_list
                    }
                ).execute()

                data = result.data
                if data:
                    df_result = pd.DataFrame(data)

                    # --- Format Output Lengkap ---
                    rank_df = (
                        df_result[
                            ["fullname", "final_match_rate", "role", "division", "department", "directorate", "job_level", "tgv_name"]
                        ]
                        .sort_values(by="final_match_rate", ascending=False)
                        .reset_index(drop=True)
                    )

                    st.subheader("üèÅ Final Match Rate ‚Äî All Employees")
                    st.dataframe(rank_df, use_container_width=True)
                    st.bar_chart(rank_df.set_index("fullname")["final_match_rate"])
                else:
                    st.warning("‚ö†Ô∏è Tidak ada hasil ditemukan dari scoring.")
        else:
            st.warning("‚ö†Ô∏è AI tidak menghasilkan mapping domain yang valid.")

    except Exception as e:
        st.error(f"Gagal menyimpan atau menjalankan analisis: {e}")

